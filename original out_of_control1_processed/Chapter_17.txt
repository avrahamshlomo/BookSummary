AN OPEN UNIVERSE 
A swarm of honeybees absconds from the hive and then dangles in a 
cluster from a tree branch. If a nearby beekeeper is lucky, the swarm settles 
on a branch that is easy to reach. The bees, gorged with honey and no longer protecting their brood, are as docile as ladybugs.
I've found a swarm or two in my time hung no higher than my head, and 
I've moved them into an empty hive box for my own. The way you move 10,000 bees from a tree branch into a box is one of life's magic shows.
If there are neighbors watching you can impress them. You lay a white sheet 
or large piece of cardboard on the ground directly under the buzzing cluster of bees. You then slide the bottom entrance lip of an empty hive under one edge of the sheet so that the cloth or cardboard forms a gigantic ramp into the hive's opening. You pause dramatically, and then you give the branch a single vigorous shake.
The bees fall out of the tree in a single clump and spill onto the sheet like 
churning black molasses. Thousands of bees crawl over each other in a chaotic buzzing mass. Then slowly, you begin to notice something. The bees align themselves toward the hive opening and march into the entrance as if they were tiny robots under one command. And they are. If you bend down to the sheet and put your nose near the pool of crawling bees, you can smell a perfume like roses. You can see that the bees are hunched over and fanning their wings furiously as they walk. They are emitting the rose smell from a gland in their rear ends and fanning the scent back to the troops behind them. The scent says, "The queen is here. Follow me." The second follows the first and the third the second and five minutes later the sheet is almost empty as the last of the swarm sucks itself into the box.
The first life on Earth could not put on that show. It was not a matter of 
lacking the right variation. There simply was no room in all of the possibilities accorded by its initial genes for such a wild act. To use the smell of a rose to coordinate 10,000 flying beings into a purposeful crawling beast was beyond early life's reach. Not only had early life not yet created the space-worker bee, queen relationship, honey from flowers, tree, hive, pheromones-in which to stage the show, it had not created the tools to make the space.Nature dispenses breathtaking diversity because its charter is open ended. 
Life did not confine itself to producing its dazzling variety within the limited space of the few genes it first made. On the contrary, one of the first things life discovered was how to create new genes, more genes, variable genes, and a bigger genetic library.
A book in Borges's Library spans a million genes; a hi-resolution Hollywood 
movie frame, 30 million. Yet as immense as the libraries built out of these are, they are only a dust mote in the meta-library of all possible libraries. 
It is one of the hallmarks of life that it continues to enlarge the space of its 
own being. Nature is an ever-expanding library of possibilities. It is an open universe. At the same time that life turns up the most improbable books from the Library shelves, it is adding new wings to the collection, making room for more of its improbable texts.
We don't know how life crossed the threshold from fixed gene space to 
variable gene space. Perhaps it was one particular gene's duty to determine the total number of genes in the chromosome. Then by mutating that one gene, the sum of genes in the string would increase or decrease. Or the size of the genome might have been indirectly determined by more than one gene. Or, more likely, genome size is determined by the structure of the genetic system itself.
Tom Ray showed that in his world of self-replicators, variable genome length 
emerged instantaneously. His creatures determined their own genome (and thus the size of their possible libraries) in a range from his unexpectedly short "22" to one creature that was 23,000 bytes long.
The consequence of an open genome is open evolution. A system which 
predetermines what each gene must do or how many genes there are can only evolve to predetermined boundaries. The first systems of Dawkins, Latham, Sims and the Russian El-Fish programmers were grounded by this limitation. They may generate all possible pictures of a given size and depth, but not all possible art. A system that does not predetermine the role or number of genes can shoot the moon. This is why Tom Ray's critters stir such excitement. In theory, his world, run long enough, could evolve anything in the ultimate Library.

There is more than one way to organize an open genome. In 1990, Karl 
Sims took advantage of the supercomputing power of the CM2 to devise a 
new type of artificial world formed by genes of unfixed length, a world much improved over his botanical-picture world. Sims accomplished this trick by creating a genome composed of small equations rather than of long strings of digits. His original library of fixed genes each controlled one visual parameter of a plant; his second library held equations of variable and open-ended length which drew curves, colors, forms and shapes.
Sims's equation-genes were small self-contained logical units of a computer 
language (LISP). Each module was an arithmetical command such as add, subtract, multiply, cosine, sine. Sims called these units "primitives"-a logical alphabet. If you have a suitable primitive alphabet you can build all possible equations, just as with the appropriately diverse alphabet of sounds you could build all spoken sentences. Add, multiply, cosine, etc., can be combined to generate any mathematical equation we can think of. Since any shape can be described by an equation, this primitive alphabet can make any picture. Adding to the complexity of the equation will subtly enlarge the complexity of the resulting image.
There was a serendipitous second advantage to working with a library of 
equations. In Sims's original world (and in Tom Ray's Tierra and Danny Hillis's coevolutionary parasites), organisms were strings of digits that randomly flipped a digit, just as books in the Borgian Library altered by one letter at a time. In Sims's improved universe, organisms were strings of logical units that randomly flipped a unit. This would be like a Borgian Library where words, not letters, were flipped. Every word in every book was correctly spelled, so every page in every book had a more sensible pattern. But whereas the soup for a Borgian Library based on words would necessitate tens of thousands of words in the pot to begin with, Sims could make all possible equations starting with a soup of only a dozen or so mathematical primitives.
Yet, the most revolutionary advantage to evolving logic units rather than 
digital bits was that it immediately moved the system onto the road toward an opened-ended universe. Logic units are functions themselves and not mere values for functions, as digital bits are. By adding or swapping a logical primitive here or there, the entire functionality of the program shifts or enlarges. New kinds of functions and new kinds of things will emerge in such 
a system.
That's what Sims found. Entirely new kinds of pictures evolved by his 
equations and painted themselves onto the computer monitor. The first thing that struck him was how rich the space was. By restricting the primitives to logical parts, Sims's LISP alphabet ensured that most equations drew some pattern. Instead of being full of muddy gray patterns, there were astounding sights almost wherever he went. Just dipping in at random landed him in the middle of "art." The first screen was full of wild red and blue zigzags. The next screen pulsated with yellow hovering orbs. The next generation yielded yellow orbs with a misty horizon, the next, sharpened waves with a horizon of blue. And the next, circular smudges of pastel yellow color reminiscent of buttercups. Almost every turn reeled in a marvelously inventive scene. In an hour, thousands of stunning pictures were roused out of their hiding places and displayed to the living for the first and last time. It was like watching over the shoulder of the world's greatest painter as he sketched without ever repeating a theme or pattern. 
While Sims selected one picture, bred variations of it, and then selected 
another, he was not only evolving pictures. Underneath it all, Sims was evolving logic. A relatively small logic equation drew an eye-boggling complex picture. At one point Sims's system evolved the following eight lines of logic code:
(cos (round (atan (log (invert y) (+ (bump (+ (round x y) y) #(0.46 0.82 0.65) 0.02 #(0.1 0.06 0.1) #(0.99 0.06 0.41) 1.47 8.7 3.7) (color-grad (round (+ y y) (log (invert x) (+ (invert y) (round (+ y x) (bump (warped-ifs (round y y) y 0.08 0.06 7.4 1.65 6.1 0.54 3.1 0.26 0.73 15.8 5.7 8.9 0.49 7.2 15.6 0.98) #(0.46 0.82 0.65) 0.02 #(0.1 0.06 0.1) #(0.99 0.06 0.41) 0.83 8.7 2.6))))) 3.1 6.8 #(0.95 0.7 0.59) 0.57))) #(0.17 0.08 0.75) 0.37) (vector y 0.09 (cos (round y y)))))
When fleshed out on Sims's color monitor, the equation painted what seems to be two sheets of icicles backlit by an arctic sunset. It's an arresting image. The ice is molded in great detail and translucent, the horizon in the background abstract and serene. It could have been painted by a weekend artist. As Sims points out, "This equation was evolved from scratch in only a few minutes-probably much faster than it could be designed."
But Sims is at a total loss to explain the logic of the equation and why it 
produces a picture of ice. It looks as cryptic and muddled to him as to you. The equation's convoluted reason is beyond quick mathematical understanding.
continue...   
 
Out of Control
The bombastic notion of evolving logic programs has been taken up in 
earnest by John Koza, a professor of computer science at Stanford. Koza 
was one of John Holland's students who brought knowledge of Holland's genetic algorithms out of the dark ages of the '60s and '70s into the renaissance of parallelism of the late '80s. 
Rather than merely explore the space of possible equations, as Sims the 
artist did, Koza wanted to breed the best equation to solve a particular problem. One could imagine (as a somewhat silly example) that in the space of possible pictures there might be one that would induce cows gazing at it to produce more milk. Koza's method can evolve the equations that would draw that particular picture. In this farfetched idea, Koza would keep rewarding the equations which drew a picture that even minutely increased milk production until there was no further increase. For his actual experiments, though, Koza choose more practical tests, such as finding an equation that could steer a moving robot. 
But in a sense his searches were similar to those of Sims and the others. He 
hunted in the Borgian Library of possible computer programs-not on an aimless mission to see what was there, but to find the best equation for a particular practical problem. Koza wrote in Genetic Programming, "I claim that the process of solving these problems can be reformulated as a search for a highly fit individual computer program in the space of possible computer programs."
For the same reason computer experts said Ray's scheme of computer 
evolution couldn't work, Koza's desire to "find" equations by breeding them bucked convention. Everyone "knew" that logic programs were brittle and unforgiving of the slightest alteration. In computer science theory, programs had two pure states: (1) flawlessly working; or (2) modified and bombed. The third state-modified at random yet working-was not in the cards. Slight modifications were known as bugs, and people paid a lot of money to keep them out. If progressive modification and improvement (evolution) of computer equations was at all possible, the experts thought, it must be so only in a few precious areas or specialized types of programs.
The surprise of artificial evolution has been that conventional wisdom was so 
wrong. Sims, Ray, and Koza have wonderful evidence that logical programs can evolve by progressive modifications. 
Koza's method was based on the intuitive hunch that if two mathematical 
equations are somewhat effective in solving a problem, then some parts of them are valuable. And if the valuable parts from both are recombined into a new program, the result might be more effective than either parent. Koza randomly recombined, in thousands of combinations, parts of two parents, banking on the probabilistic likelihood that one of those random recombinations would include the optimal arrangement of valuable parts to better solve the problem.
There are many similarities between Koza's method and Sims's. Koza's soup, 
too, was a mixture of about a dozen arithmetical primitives, such as add, multiply, cosine, rendered in the computer language LISP. The units were strung together at random to form logical "trees," a hierarchical organization somewhat like a computer flow chart. Koza's system created 500 to 10,000 different individual logic trees as the breeding population. The soup usually converged upon a decent offspring in about 50 generations.
Variety was forced by sexually swapping branches from one tree to the next. 
Sometimes a long branch was grafted, other times a mere twig or terminal "leaf." Each branch could be thought of as an intact subroutine of logic made of smaller branches. In this way, bits of equation (a branch), or a little routine that worked and was valuable, had a chance of being preserved or even passed around.
All manner of squirrely problems can be solved by evolving equations. A 
typical riddle which Koza subjected to this cure was how to balance a broom on a skateboard. The skateboard must be moved back and forth by a motor to keep the inverted broom pivoted upright in the board's center. The motor-control calculations are horrendous, but not very different from the control circuits needed for maneuvering robot arms. Koza found he could evolve a program to achieve this control.
Other problems he tested evolutionary equations against included: 
strategies for navigating a maze; rules for solving quadratic equations; methods to optimize the shortest route connecting many cities (also known as traveling salesman problem); strategies for winning a simple game like tic-tac-toe. In each case, Koza's system sought a formula for the test problem rather than a specific answer for a specific instance of the test. The more varied instances a sound formula was tested against, the better the formula became with each generation. 
While equation breeding yields solutions that work, they are usually the 
ugliest ones you could imagine. When Koza began to inspect the insides of his highly evolved prizes, he had the same shock that Sims and Ray did: the solutions were a mess! Evolution went the long way around. Or it burrowed through the problem by some circuitous loophole of logic. Evolution was chock-full of redundancy. It was inelegant. Rather than remove an 
erroneous section, evolution would just add a countercorrecting section, or reroute the main event around the bad sector. The final formula had the appearance of being some miraculous Rube Goldberg collection of items that by some happy accident worked. And that's exactly what it was, of course. 
Take as an example a problem Koza once threw at his evolution machine. It 
was a graph of two intertwining spirals. A rough approximation would be the dual spirals in pinwheel. Koza's evolutionary equation machine had to evolve the best equation capable of determining on which of the two intertwined spiral lines each of about 200 data points lay. 
Koza loaded his soup with 10,000 randomly generated computer formulas. 
He let them breed, as his machine selected the equations that came closest to getting the right formula. While Koza slept, the program trees swapped branches, occasionally birthing a program that worked better. He ran the machine while he was on vacation. When he returned, the system had evolved an answer that perfectly categorized the twin spirals.
This was the future of software programming! Define a problem and the 
machine will find a solution while the engineers play golf. But the solution Koza's machine found tells us a lot about the handiwork of evolution. Here's the equation it came up with:
(SIN (IFLTE (IFLTE (+ Y Y) (+ X Y) (- X Y) (+ Y Y)) (* X X) (SIN (IFLTE (% Y Y) (% (SIN (SIN (% Y 0.30400002))) X) (% Y 0.30400002) (IFLTE (IFLTE (% (SIN (% (% Y (+ X Y)) 0.30400002)) (+ X Y)) (% X 0.10399997) (- X Y) (* (+ -0.12499994 -0.15999997) (- X Y))) 0.30400002 (SIN (SIN (IFLTE (% (SIN (% (% Y 0.30400002) 0.30400002)) (+ X Y)) (% (SIN Y) Y) (SIN (SIN (SIN (% (SIN X) (+ -0.12499994 -0.15999997))))) (% (+ (+ X Y) (+ Y Y)) 0.30400002)))) (+ (+ X Y) (+ Y Y))))) (SIN (IFLTE (IFLTE Y (+ X Y) (- X Y) (+ Y Y)) (* X X) (SIN (IFLTE (% Y Y) (% (SIN (SIN (% Y 0.30400002))) X) (% Y 0.30400002) (SIN (SIN (IFLTE (IFLTE (SIN (% (SIN X) (+ -0.12499994 -0.15999997))) (% X -0.10399997) (- X Y) (+ X Y)) (SIN (% (SIN X) (+ -0.12499994 -0.15999997))) (SIN (SIN (% (SIN X) (+ -0.12499994 -0.15999997)))) (+ (+ X Y) (+ Y Y))))))) (% Y 0.30400002))))).
Not only is it ugly, it's incomprehensible. Even for a mathematician or computer programmer, this evolved formula is a tar baby in the briar patch. Tom Ray says evolution writes code that only an intoxicated human programmer would write, but it may be more accurate to say evolution generates code that only an alien would write; it is decidedly inhuman. Backtracking through the evolving ancestors of the equation, Koza eventually traced the manner in which the program tackled the problem. By sheer persistence and by hook and crook it found a laborious roundabout way to its own answer. But it worked.The answer evolution discovered seems strange because almost any high 
school algebra student could write a very elegant equation in a single line that described the two spirals.
There was no evolutionary pressure in Koza's world toward simple solutions. 
His experiment could not have found that distilled equation because it wasn't structured to do so. Koza tried applying parsimony in other runs but found that parsimony added to the beginning of a run dampened the efficiency of the solutions. He'd find simple but mediocre to poor solutions. He has some evidence that adding parsimony at the end of evolutionary procedure-that is, first let the system find a solution that kind of works and then start paring it down-is a better way to evolve succinct equations.
But Koza passionately believes parsimony is highly overrated. It is, he says, 
a mere "human esthetic." Nature isn't particularly parsimonious. For instance, David Stork, then a scientist at Stanford, analyzed the neural circuits in the muscles of a crayfish tail. The network triggers a curious backflip when the crayfish wants to escape. To humans the circuit looks baroquely complex and could be simplified easily with the quick removal of a couple of superfluous loops. But the mess works. Nature does not simplify simply to be elegant.

Humans seek a simple formula such as Newton's f=ma, Koza suggests, 
because it reflects our innate faith that at bottom there is elegant order in 
the universe. More importantly, simplicity is a human convenience. The heartwarming beauty we perceive in f=ma is reinforced by the cold fact that it is a much easier formula to use than Koza's spiral monster. In the days before computers and calculators, a simple equation was more useful because it was easier to compute without errors. Complicated formulas were a grind and treacherous. But, within a certain range, neither nature nor parallel computers are troubled by convoluted logic. The extra steps we find ugly and stupefying, they do perfectly in tedious exactitude. 
The great irony puzzling cognitive scientists is why human consciousness is 
so unable to think in parallel, despite the fact that the brain runs as a parallel machine. We have an almost uncanny blind spot in our intellect. We cannot innately grasp concepts in probability, horizontal causality, and simultaneous logic. We simply don't think like that. Instead our minds retreat to the serial narrative-the linear story. That's why the first computers were programmed in von Neumann's serial design: because that's how humans think. 
And this, again, is why parallel computers must be evolved rather than 
designed: because we are simpletons when it comes to thinking in parallel. Computers and evolution do parallel; consciousness does serial. In a very provocative essay in the Winter 1992 Daedalus, James Bailey, director of marketing at Thinking Machines, wrote of the wonderful boomeranging influence that parallel computers have on our thinking. Entitled "First We Reshape Our Computers. Then Our Computers Reshape Us," Bailey argues that parallel computers are opening up new territories in our intellectual landscape. New styles of computer logic in turn force new questions and new perspectives from us. "Perhaps," Bailey suggests, "whole new forms of reckoning exist, forms that only make sense in parallel." Thinking like evolution may open up new doors in the universe.
John Koza sees the ability of evolution to work on both ill-defined and 
parallel problems as another of its inimitable advantages. The problem with teaching computers how to learn to solve problems is that so far we have wound up explicitly reprogramming them for every new problem we come across. How can computers be designed to do what needs to be done, without being told in every instance what to do and how to do it? 
Evolution, says Koza, is the answer. Evolution allows a computer's software 
to solve a problem to which the scope, kind, or range of the answer(s) may not be evident at all, as is usually the case in the real world. Problem: A banana hangs in a tree; what is the routine to get it? Most computer learning to date cannot solve that problem unless we explicitly clue the program in to certain narrow parameters such as: how many ladders are nearby? Any long poles? 
Having defined the boundaries of the answer, we are half answering the 
question. If we don't tell it what rocks are near, we know we won't get the answer "throw a rock at it." Whereas in evolution, we might. More probably, evolution would hand us answers we could have never expected: use stilts; learn to jump high, employ birds to help you; wait until after storms; make children and have them stand on your head. Evolution did not narrowly require that insects fly or swim, only that they somehow move quick enough to escape predators or catch prey. The open problem of escape led to the narrow answers of water striders tiptoeing on water or grasshoppers springing in leaps.
Every worker dabbling in artificial evolution has been struck by the ease with 
which evolution produces the improbable. "Evolution doesn't care about what makes sense; it cares about what works," says Tom Ray. 
The nature of life is to delight in all possible loopholes. It will break any rule 
it comes up with. Take these biological jaw-droppers: a female fish that is fertilized by her male mate who lives inside her, organisms that shrink as they grow, plants that never die. Biological life is a curiosity shop whose shelves never empty. Indeed the catalog of natural oddities is almost as long as the list of all creatures; every creature is in some way hacking a living by reinterpreting the rules. 
The catalog of human inventions is far less diverse. Most machines are cut 
to fit a specific task. They, by our old definition, follow our rules. Yet if we imagine an ideal machine, a machine of our dreams, it would adapt, and-better yet-evolve.
Adaptation is the act of bending a structure to fit a new hole. Evolution, on 
the other hand, is a deeper change that reshapes the architecture of the structure itself-how it can bend-often producing new holes for others. If we predefine the organizational structure of a machine, we predefine what problems it can solve. The ideal machine is a general problem solver, one that has an open-ended list of things it can do. That means it must have an open-ended structure, too. Koza writes, "The size, shape, and structural complexity [of a solution] should be part of the answer produced by a problem solving technique-not part of the question." In recognizing that a system itself sets the answers the system can make, what we ultimately want, then, is a way to generate machines that do not possess a predefined 
architecture. We want a machine that is constantly remaking itself.
Those interested in kindling artificial intelligence, of course, say "amen." 
Being able to come up with a solution without being unduly prompted to where the solution might exist-lateral thinking it's called in humans-is almost the definition of human intelligence. 
The only machine we know of that can reshape its internal connections is the 
living gray tissue we call the brain. The only machine that would generate its own structure that we can presently even imagine manufacturing would be a software program that could reprogram itself. The evolving equations of Sims and Koza are the first step toward a self-reprogramming machine. An equation that can breed other equations is the basic soil for this kind of life. Equations that breed other equations are an open-ended universe. Any possible equation could arise, including self-replicating equations and formulas that loop back in a Uroborus bite to support themselves. This kind of recursive program, which reaches into itself and rewrites its own rules, unleashes the most magnificent power of all: the creation of perpetual novelty.
"Perpetual novelty" is John Holland's phrase. He has been crafting means of 
artificial evolution for years. What he is really working on, he says, is a new mathematics of perpetual novelty. Tools to create neverending newness.
Karl Sims told me, "Evolution is a very practical tool. It's a way of exploring 
new things you wouldn't have thought about. It's a way of refining things. And it's a way of exploring procedures without having to understand them. If computers are fast enough they can do all these things."
Exploring beyond the reach of our own understanding and refining what we 
have are gifts that directed, supervised, optimizing evolution can bring us. "But evolution," says Tom Ray, "is not just about optimization. We know that evolution can go beyond optimization and create new things to optimize." When a system can create new things to optimize we have a perpetual novelty tool and open-ended evolution.
Both Sims's selection of images and Koza's selection of software via the 
breeding of logic are examples of what biologists call breeding or artificial selection. The criteria for "fit"-for what is selected-is chosen by the breeder and is thus an artifact, or artificial. To get perpetual novelty-to find things we don't anticipate-we must let the system itself define the criteria for what it selects. This is what Darwin meant by "natural selection." The selection criteria was done by nature of the system; it arose naturally. Open-ended artificial evolution also requires natural selection, or if you will, artificial natural selection. The traits of selection should emerge naturally from the artificial world itself. Tom Ray has installed the tool of artificial natural selection by letting his 
world determine its own fitness selection. Therefore his world is theoretically capable of evolving completely new things. But Ray did "cheat" a little to get going. He could not wait for his world to evolve self-replication on its own. So he introduced a self-replicating organism from the beginning, and once introduced, replication never vanished. In Ray's metaphor, he jump-started life as a single-celled organism, and then watched a "Cambrian explosion" of new organisms. But he isn't apologetic. "I'm just trying to get evolution and I don't really care how I get it. If I need to tweak my world's physics and chemistry to the point where they can support rich, open-ended evolution, I'm going to be happy. It doesn't make me feel guilty that I had to manipulate them to get it there. If I can engineer a world to the threshold of the Cambrian explosion and let it boil over the edge on its own, that will be truly impressive. The fact that I had to engineer it to get there will be trivial compared to what comes out of it."
Ray decided that getting artificial open-ended evolution up and running was 
enough of a challenge that he didn't need to evolve it to that stage. He would engineer his system until it could evolve on its own. As Karl Sims said, evolution is a tool. It can be combined with engineering. Ray used artificial natural selection after months of engineering. But it can go both ways. Other workers will engineer a result after months of evolution.

As a tool, evolution is good for three things: 
●     How to get somewhere you want but can't find the route to. 
●     How to get to somewhere you can't imagine. 
●     How to open up entirely new places to get to. 
The third use is the door to an open universe. It is unsupervised, undirected 
evolution. It is Holland's ever-expanding perpetual novelty machine, the thing that creates itself. 
Amateur gods such as Ray, Sims, and Dawkins have all expressed their 
astonishment at the way evolution seems to amplify the fixed space they thought they had launched. "It's a lot bigger than I thought" is the common refrain. I had a similar overwhelming impression when I stepped and jumped (literally) through the picture space of Karl Sims's evolutionary exhibit. Each new picture I found (or it found for me) was gloriously colored, unexpectedly complex, and stunningly different from anything I had ever seen before. Each new image seemed to enlarge the universe of possible pictures. I realized that my idea of a picture had previously been defined by pictures made by humans, or perhaps by biological nature. But in Sims's world an equally vast number of breathtaking vistas that were neither human-made nor biologically made-but equally rich-were waiting to be unwrapped.
Evolution was expanding my notions of possibilities. Life's biological system 
is very much like this. Bits of DNA are functional units-logical evolvers that expand the space of possibilities. DNA directly parallels the operation of Sims's and Koza's logical units. (Or should we say their logical units parallel DNA?) A handful of units can be mixed and matched to code for any one of an astronomical number of possible proteins. The proteins produced by this small functional alphabet serve as tissue, disease, medicines, flavors, signals, and the bulk infrastructure of life. 
Biological evolution is the open-ended evolution of DNA units breeding new 
DNA units in a library that is ever-expanding and without known boundaries.
Gerald Joyce, the molecular breeder, says he is happily into "evolving molecules for fun and profit." But his real dream is to hatch an alternative 
open-ended evolution scheme. He told me, "My interest is to see if we can set in motion, under our own control, the process of self-organization." The test case Joyce and colleagues are working on is to try to get a simple ribozyme to evolve the ability to replicate itself-that very crucial step that Tom Ray skipped over. "The explicit goal is to set an evolving system in motion. We want molecules to learn how to make copies of themselves by themselves. Then it would be autonomous evolution instead of directed evolution." 
Right now autonomous and self-sustained evolution is a mere dream for 
biochemists. No one has yet coerced an evolutionary system to take an "evolutionary step," one that develops a chemical process that heretofore didn't exist. To date, biochemists have only evolved new molecules which resolve problems they already knew how to solve. "True evolution is about going somewhere novel, not just reeling in interesting variants," says Joyce.
A working, autonomous, evolving, molecular system would be an incredibly 
powerful tool. It would be an open-ended system that could create all possible biologies. "It would be biology's triumph!" Joyce exclaims, equivalent, he believes, to the impact of "finding another life form in the universe that was happy to share samples with us."
But Joyce is a scientist and does not want to let his enthusiasm run over the 
edge: "We're not saying we are going to make life and it's going to develop its own civilization. That's goofy. We're saying we are going to make an artificial life form that is going to do slightly different chemistry than it does now. That's not goofy. That's realistic."

But Chris Langton doesn't find the prospect of artificial life creating its 
own civilization so goofy. Langton has gotten a lot of press for being the 
maverick who launched the fashionable field of artificial life. He has a good story, worth retelling very briefly because his own journey recapitulates the awakening of human-made, open-ended evolution.
Several years ago Langton and I attended a week-long science conference in 
Tucson, and to clear our heads, we played hooky for an afternoon. I had an invitation to visit the unfinished Biosphere 2 project an hour away, and so as we cruised the black ribbon of asphalt that winds through the basins of southern Arizona, Langton told me his life story. 
At the time, Langton worked at the Los Alamos National Laboratory as a 
computer scientist. The entire town and lab of Los Alamos were originally built to invent the ultimate weapon. So I was surprised to hear Langton begin his story by saying he was a conscientious objector during the Vietnam War.
As a CO, Langton scored a chance to do alternative service as a hospital 
orderly at Boston's Massachusetts General Hospital. He was assigned the undesirable chore of transporting corpses from the hospital basement to the morgue basement. On the first week of the job, Langton and his partner loaded a corpse onto a gurney and pushed it through the dank, underground corridor connecting the two buildings. They needed to push it over a small concrete bridge under the only light in the tunnel, and as the gurney hit the bump, the corpse belched, sat upright, and started to slide off its perch! Chris spun around to grab his partner, but he saw only the distant doors flapping behind his coworker. Dead things could behave as if they were alive! Life was behavior; that was the first lesson.
Langton told his boss he couldn't go back to that job. Could he do something 
else? "Can you program computers?" he was asked. "Sure."
He got a job programming early-model computers. Sometimes he would let 
a silly game run on the unused computers at night. The game was called Life, devised by John Conway, and written for the mainframe by an early hacker named Bill Gosper. The game was a very simple code that would generate an infinite variety of forms, in patterns reminiscent of biological cells growing, replicating, and propagating on an agar plate. Langton 
remembered working alone late one night and suddenly feeling the presence of someone, something alive in the room, staring at him. He looked up and on the screen of Life he saw an amazing pattern of self-replicating cells. A few minutes later he felt the presence again. He looked up again and saw that the pattern had died. He suddenly felt that the pattern had been alive-alive and as real as mold on an agar plate-but on a computer screen instead. The bombastic idea that perhaps a computer program could capture life sprouted in Langton's mind.
He started fooling around with the game, probing it, wondering if it was 
possible to design a game like Life that would be open ended-so that things would start to evolve on their own. He honed his programmer skills. On the job Langton was given the task of transferring a program from an out-of-date mainframe computer to a very different newer one. In order to do this, the trick was to abstract the operation of the hardware of the old computer and put it into the software of the newer one-to extract the essential behavior of the hardware and cast it in intangible symbols. This way, old programs running on the new machine would be running in a virtual old computer emulated in software in the new computer. Langton said, "This was a first-hand experience of moving a process from one medium to another. The hardware didn't matter. You could run it on any hardware. What mattered was capturing the essential processes." It made him wonder if life could be taken from carbon and put into silicon.
After his service stint Langton spent his summers hang-gliding. He and a 
friend got a job hang-gliding over Grandfather Mountain in North Carolina for $25 per day as an airborne tourist attraction. They stayed aloft for hours at a time in 40-mile-per-hour winds. Swiped by a freak gust one day, Langton crashed from the sky. He hit the ground in a fetus position and broke 35 bones, including all the bones in his head except his skull. Although he smashed his knees through his face, he was alive. He spent the next six months on his back, half-conscious.
As he recovered from his massive concussions, Langton felt he was watching 
his brain "reboot," just as computers that are turned off have to rebuild their operating system when turned back on. One by one certain deep functions of his mind reappeared. In an epiphany of sorts, Langton remembers the moment when his sense of proprioception-the sense of being centered in a body-returned. He was suddenly struck with a "deep emotional gut feeling" of his own self becoming integrated, as if his machine had completed its reboot and was now waiting for an application. "I had a personal experience of what growing a mind feels like," he told me. Just as he had seen life in a computer, he now had a visceral appreciation of his own life being in a machine. Surely, life must be independent of its matrix? Couldn't life in both his body and his computer be the same?
Wouldn't it be great, he thought, if he could get something alive with 
evolution going in a computer! He thought he would start with human culture. That seemed an easier simulation to start with than simulated cells 
and DNA. As a senior at the University of Arizona, Langton wrote a paper on "The Evolution of Culture." He wanted his anthropology, physics, and computer science professors to let him design a degree around building a computer to run artificial evolution, but they discouraged him. On his own he bought an Apple II and wrote his first artificial world. He couldn't get self-reproduction or natural selection, but he did discover the literature of cellular automata-of which the Game of Life, it turned out, was only one example. 
And he came across John von Neumann's proofs of artificial self-replication 
from the 1940s. Von Neumann had come up with a landmark formula that would self-replicate. But the program was unwieldy, inelegantly large and clumsy. Langton spent months of long nights coding his Apple II (a handy advantage that von Neumann didn't have; he did his with pencil on paper). Eventually guided only by his dream to create life in silicon, Langton came up with the smallest self-replicating machine then known to anyone. On the computer screen the self-replicator looked like a small blue Q. Langton was able to pack into its loop of only 94 symbols a complete representation of the loop, instructions on how to reproduce, and the trick of throwing off another just like itself. He was delirious. If he could engineer such a simple replicator, how many of life's other essential processes could he also mimic? Indeed, what were life's other essential processes?
A thorough search of the existing literature showed that very little science 
had been written on such a simple question, and what little there was, was scattered here and there in hundreds of tiny corners. Emboldened by his new research position at the Los Alamos Labs, in 1987 Langton staked his career on gathering an "Interdisciplinary Workshop on the Synthesis and Simulation of Living Systems,"-the first conference on what Langton was now calling Artificial Life. In his search for any and all systems that exhibit the behavior of living systems, Langton opened the workshop to chemists, biologists, computer scientists, mathematicians, material scientists, philosophers, roboticists, and computer animators. I was one of the few journalists attending.

At the workshop Langton began with his quest for a definition of life. 
Existing ones seemed inadequate. As more research was started over the 
years following the first conference, physicist Doyne Farmer proposed a list of traits that defined life. Life, he said, has:
●     Patterns in space and time 
●     Self-reproduction 
●     Information storage of its self-representation (genes) 
●     Metabolism, to keep the pattern persisting 
●     Functional interactions-it does stuff 
●     Interdependence of parts, or the ability to die 
●     Stability under perturbations 
●     Ability to evolve. 
The list provokes. For although we do not consider computer viruses alive, computer viruses satisfy most of the qualifications above. They are a pattern that reproduce; they include a copy of their own representation; they capture computer metabolistic (CPU) cycles; they can die; and they can evolve. We could say that computer viruses are the first examples of emergent artificial life.
On the other hand, we all know of a few things whose aliveness we don't 
doubt yet are exceptions to this list. A mule can not self-reproduce, and a herpes virus has no metabolism. Langton's success in creating a self-reproducing entity made him skeptical of arriving at a consensus: "Every time we succeed in synthetically satisfying the definition of life, the definition is lengthened or changed. For instance if we take Gerald Joyce's definition of life-a self-sustaining chemical system capable of undergoing Darwinian evolution-I believe that by the year 2000 one lab somewhere in the world will make a system satisfying this definition. But then biologists will merely redefine life."
Langton had better luck defining artificial life. Artificial life, or "a-life" in short hand, is, he said, "the attempt to abstract the logic of life in different material forms." His thesis was that life is a process-a behavior that is not bound to a specific material manifestation. What counts about life is not the stuff it is made of, but what it does. Life is a verb not a noun. Farmer's list of qualifications for life represent actions and behaviors. 
It is not hard for computer scientists to think of the list of life's qualities as varieties of processing. Steen Rasmussen, a colleague of Langton who was also interested in artificial life, once dropped a pencil onto the desk and sighed, "In the West we think a pencil is more real than its motion." 
If the pencil's motion is the essence-the real part-then "artificial" is a 
deceptive word. At the first Artificial Life Conference, when Craig Reynolds showed how he was able to use three simple rules to get dozens of computer-animated birds to flock in the computer autonomously, everyone could see that the flocking was real. Here were artificial birds really flocking. Langton summarized the lesson: "The most important thing to remember about a-life is that the part that is artificial is not the life, but the materials. Real things happen. We observe real phenomena. It is real life in an artificial medium."
Biology-the study of life's general principles-is undergoing an upheaval. 
Langton says biology faces "the fundamental obstacle that it is impossible to derive general principles from single examples." Since we have only a single collective example of life on Earth, it is pointless to try to distinguish its essential and universal properties from those incidental properties due to life's common descent on the planet. For instance, how much of what we think life is, is due to its being based on carbon chains? We can't know without at least a second example of life not based on carbon chains. To derive general principles and theories of life-that is, to identify properties that would be shared by any vivisystem or any life-Langton argues that "we need an ensemble of instances to generalize over. Since it is quite unlikely that alien life-forms will present themselves to us for study in the near future, our only option is to try to create alternative life-forms ourselves." This is Langton's mission-to create an alternative life, or maybe even several alternative "lifes," as a basis for a true biology, a true logic of Bios. Since these other lifes are artifacts of humans rather than nature, we call them artificial life; but they are as real as we are.
The nature of this ambitious challenge initially sets the science of artificial 
life apart from the science of biology. Biology seeks to understand the living by taking it apart and reducing it to it pieces. Artificial life, on the other hand, has nothing to dissect, so it can only make progress by putting the living together and assembling it from pieces. Rather than analyze life, synthesize it. For this reason, Langton says, "Artificial life amounts to the practice of synthetic biology."

Artificial life acknowledges new lifes and a new definition of life. "New" 
life is an old force that organizes matter and energy in new ways. Our 
ancient ancestors were often generous in deeming things alive. But in the age of science, we make a careful distinction. We call creatures and green plants alive, but when we call an institution such as the post office an "organism," we say it is lifelike or "as if it were alive." 
We (and by this I mean scientists first) are beginning to see that those 
organizations once called metaphorically alive are truly alive, but animated by a life of a larger scope and wider definition. I call this greater life "hyperlife." Hyperlife is a particular type of vivisystem endowed with integrity, robustness, and cohesiveness-a strong vivisystem rather than a lax one. A rain forest and a periwinkle, an electronic network and a servomechanism, SimCity and New York City, all possess degrees of hyperlife. Hyperlife is my word for that class of life that includes both the AIDS virus and the Michelangelo computer virus.
Biological life is only one species of hyperlife. A telephone network is another 
species. A bullfrog is chock-full of hyperlife. The Biosphere 2 project in Arizona swarms with hyperlife, as do Tierra, and Terminator 2. Someday hyperlife will blossom in automobiles, buildings, TVs, and test tubes.
This is not to say that organic life and machine life are identical; they are 
not. Water striders will forever retain certain characteristics unique to carbon-based life. But organic and artificial life share a set of characteristics that we have only begun to discern. And of course there easily may be other types of hyperlife to come that we can't describe yet. One can imagine various possibilities of life-weird hybrids bred from both biological and synthetic lines, the half-animal/half-machine cyborgs of old science fiction-that may have emergent properties of hyperlife not found in either parent.
Man's every attempt to create life is a probe into the space of possible 
hyperlifes. This space includes all endeavors to re-create the origins of life on Earth. But the challenge goes way beyond that. The goal of artificial life is not to merely describe the space of "life-as-we-know-it." The quest that fires up Langton is the hope of mapping the space of all possible lifes, a quest that moves us into the far, far vaster realm of "life-as-it-could-be." Hyperlife is that library which contains all things alive, all vivisystems, all slivers of life, anything bucking the second law of thermodynamics, all future and all 
past arrangements of matter capable of open-ended evolution, and all examples of a type of something marvelous we can't really define yet.
The only way to explore this terra incognita is to build many examples and 
see if they fit in the space. As Langton wrote in his introduction to the proceedings of the Second Artificial Life conference, "If biologists could 're-wind the tape' of evolution and start it over, again and again, from different initial conditions, or under different regimes of external perturbations along the way, they would have a full ensemble of evolutionary pathways to generalize over." Keep starting from zero, alter the rules a bit and then build an example of artificial life. Do it dozens of times. Each instance of synthetic life is added to the example of Earth-bound organic life to form the complete ensemble of hyperlife.
Since life is a property of form, and not matter, the more materials we can 
transplant living behaviors into, the more examples of "life-as-it-could-be" we can accumulate. Therefore the field of artificial life is broad and eclectic in considering all avenues to complexity. A typical gathering of a-life researchers includes biochemists, computer wizards, game designers, animators, physicists, math nerds, and robot hobbyists. The hidden agenda is to hack the definition of life.
One evening after a late-night lecture session at the First Artificial Life Conference, while some of us watched the stars in the desert night sky, mathematician Rudy Rucker came up with the most expansive motivation for artificial life I've heard: "Right now an ordinary computer program may be a thousand lines and take a few minutes to run. Artificial life is about finding a computer code that is only a few lines long and that takes a thousand years to run."
That seems about right. We want the same in our robots: Design them for a 
few years and then have them run for centuries, perhaps even manufacturing their replacements. That's what an acorn is too-a few lines of code that run out as a 180-year-old tree.
The conference-goers felt the important thing about artificial life was that it not only was redefining biology and life, but it was also redefining the concept of both artificial and real. It was radically enlarging the realm of what seemed important-that is, the realm of life and reality. Unlike the "publish or perish" mode of academic professionalism of yesteryear, most of the artificial life experimenters-even the mathematicians-espoused the 
emerging new academic creed of "demo or die." The only way to make a dent in artificial and hyperlife was to get a working example up and running. Explaining how he got started in life-as-it-could-be, Ken Karakotsios, a former Apple employee, recalled, "Every time I met a computer I tried to program the Game of Life into it." This eventually led to a remarkable Macintosh a-life program called SimLife. In SimLife you create a hyperlife 
world and set loose little creatures into it to coevolve into a complexifying artificial ecology. Now Karakotsios seeks to write the biggest and best game of life, an ultimate living program: "You know, the universe is the only thing big enough to run the ultimate game of life. The only problem with the universe as a platform, though, is that it is currently running someone else's program."
Larry Yaeger, a current Apple employee, once handed me his business card. It ran: "Larry Yaeger, Microcosmic God." Yaeger created Polyworld, a sophisticated computer world with organisms in the shape of polygons. The polys fly around by the hundreds, mating, breeding, consuming resources, learning (a power God Yaeger gave them), adapting, and evolving. Yaeger was exploring the space of possible life. What would appear? "At first," said Yaeger, "I did not charge the parents an energy cost when offspring was born. They could have offspring for free. But I kept getting this particular species, these indolent cannibals, who liked to hang around the corner in the vicinity of their parents and children and do nothing, never leave. All they would do was mate with each other, fight with each other, and eat each other. Hey, why work when you can eat your kids!" Life of some hyper-type had appeared.
"A central motivation for the study of artificial life is to extend biology to a 
broader class of life forms than those currently present on the earth," writes Doyne Farmer, understating the sheer, great fun artificial life gods are having.
But Farmer is onto something. Artificial life is unique among other human 
endeavors for yet another reason. Gods such as Yaeger are extending the class of life because life-as-it-could-be is a territory we can only study by first creating it. We must manufacture hyperlife to explore it, and to explore it we must manufacture it. 
But as we busily create ensembles of new forms of hyperlife, an uneasy 
thought creeps into our minds. Life is using us. Organic carbon-based life is merely the first, earliest form of hyperlife to evolve into matter. Life has conquered carbon. But now under the guise of pond weed and kingfisher, life seethes to break out into crystal, into wires, into biochemical gels, and into hybrid patches of nerve and silicon. If we look at where life is headed, we have to agree with developmental biologist Lewis Held when he said, "Embryonic cells are just robots in disguise." In his report for the proceedings of Second Artificial Life Conference Tom Ray wrote, "Virtual life is out there, waiting for us to create environments for it to evolve into." Langton told Steven Levy, reporting in Artificial Life, "There are these other forms of life, artificial ones, that want to come into existence. And they are using me as a vehicle for its reproduction and its implementation." 
Life-the hyperlife-wants to explore all possible biologies and all possible evaluations, but it uses us to create them because to create them is the only 
way to explore or complete them. Humanity is thus, depending on how you look at it, a mere passing station on hyperlife's gallop through space, or the critical gateway to the open-ended universe.
"With the advent of artificial life, we may be the first species to create its 
own successors," Doyne Farmer wrote in his manifesto, Artificial Life: The Coming Evolution. "What will these successors be like? If we fail in our task as creators, they may indeed be cold and malevolent. However, if we succeed, they may be glorious, enlightened creatures that far surpass us in their intelligence and wisdom." Their intelligence might be "inconceivable to lower forms of life such as us." We have always been anxious about being gods. If through us, hyperlife should find spaces where it evolves creatures that amuse and help us, we feel proud. But if superior successors should ascend through our efforts, we feel fear. 
Chris Langton's office sat catty-corner to the atomic museum in Los Alamos, 
a reminder of the power we have to destroy. That power stirred Langton. "By the middle of this century, mankind had acquired the power to extinguish life," he wrote in one of his academic papers. "By the end of the century, he will be able to create it. Of the two, it is hard to say which places the larger burden of responsibilities on our shoulders."
Here and there we create space for other varieties of life to emerge. Juvenile 
delinquent hackers launch potent computer viruses. Japanese industrialists weld together smart painting robots. Hollywood directors create virtual dinosaurs. Biochemists squeeze self-evolving molecules into tiny plastic test tubes. Someday, we will create an open-ended world that can keep going, and keep creating perpetual novelty. When we do we will have created another living vector in the life space.
When Danny Hillis says he wants to make a computer that would be proud 
of him, he isn't kidding. What could be more human than to give life? I think I know: to give life and freedom. To give open-ended life. To say, here's your life and the car keys. Then you let it do what we are doing-making it all up as we go along. Tom Ray once told me, "I don't want to download life into computers. I want to upload computers into life."